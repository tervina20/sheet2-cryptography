from collections import Counter

ENGLISH_FREQ_ORDER = "ETAOINSHRDLCUMWFGYPBVKJXQZ"
ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

def frequency_analysis(ciphertext):
    
    ciphertext = ciphertext.upper()
    letter_counts = Counter([char for char in ciphertext if char.isalpha()])
    sorted_letters = sorted(letter_counts, key=lambda x: (-letter_counts[x], x))
    return sorted_letters

def complete_with_alphabet(sorted_letters):
    
    for letter in ALPHABET:
        if letter not in sorted_letters:
            sorted_letters.append(letter)
    return sorted_letters

def create_mapping(cipher_freq, english_freq):
   
    mapping = {cipher_letter: english_letter for cipher_letter, english_letter in zip(cipher_freq, english_freq)}
    return mapping

def decrypt(ciphertext, mapping):
   
    decrypted_text = ''
    for char in ciphertext:
        if char.upper() in mapping:
            decrypted_char = mapping[char.upper()]
            decrypted_text += decrypted_char.lower() if char.islower() else decrypted_char
        else:
            decrypted_text += char
    return decrypted_text

    
ciphertext = input("Enter the encrypted message: ")

   
cipher_freq_order = frequency_analysis(ciphertext)

    
complete_freq_order = complete_with_alphabet(cipher_freq_order)


mapping = create_mapping(complete_freq_order, ENGLISH_FREQ_ORDER)

   
decrypted_text = decrypt(ciphertext, mapping)

   
print("\nEstimated Mapping (Cipher → Plain):")
for cipher_letter, plain_letter in mapping.items():
        print(f"{cipher_letter} → {plain_letter}")

print("\nMost Likely Decrypted Text:")
print(decrypted_text)

